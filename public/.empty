/**
 * @class VoiceSearchService
 * @description Main service class for managing voice search functionality, including speech recognition and manual fallback.
 */
class VoiceSearchService {
    /**
     * @constructor
     * @param {SpeechRecognition} Recognition - The SpeechRecognition API class (or a polyfill).
     * @param {boolean} useGrammar - Whether to use pre-defined command grammar.
     * @param {HTMLElement|null} element - The target element to populate with recognized text, if applicable.
     * @param {Object} options - Configuration options for speech recognition.
     * @param {boolean} [options.debugMode=false] - Enable or disable debug logging.
     * @param {string} [options.lang='en-US'] - Language for speech recognition.
     * @param {boolean} [options.continuous=true] - Whether recognition should continue without stopping.
     * @param {boolean} [options.interimResults=false] - Whether to capture interim results during recognition.
     */    
    constructor(Recognition, useGrammar, element = null, options = {}) {
        this.logger = new Logger(options.debugMode || false);
        
        // CHECK BROWSER SUPPORT
        if (!Recognition) {
            this.logger.error('Speech Recognition is not supported in this browser');
            this.isSupported = false;
            return;
        }

        // CONFIGURATION WITH DEFAULTS
        this.config = {
            lang: options.lang || 'en-US',
            continuous: options.continuous ?? true,
            interimResults: options.interimResults ?? false,
            autoRestart: options.autoRestart ?? true, // NEW: Auto-restart property
            maxRestarts: options.maxRestarts ?? 10,   // NEW: Limit restarts    
            ...options
        };

        this.recognition = new Recognition();
        this.useGrammar = useGrammar;
        this.element = element;
        this.isSupported = true;
        this.restartCount = 0; // NEW: Track restarts

        // Track recognition state
        this.isListening = false;


        // APPLY CONFIGURATIONS
        Object.assign(this.recognition, this.config);

        this._setupRecognitionListeners();
    }

 
    /**
     * @method toggleService
     * @description Toggles the voice search service on and off
     * @param {HTMLButtonElement} micButton - The microphone button element
     */
    toggleService(micButton) {
        if (!this.isSupported) {
            this.fallbackToManualInput();
            return;
        }

        // If currently listening, stop the recognition
        if (this.isListening) {
            this.stopService(micButton);
        } else {
            this.startService(micButton);
        }
    }

    /**
     * @method startService
     * @description Starts the voice search service
     * @param {HTMLButtonElement} micButton - The microphone button element
     */
    startService(micButton) {
        if (this.isListening) return; // Avoid starting multiple times

        this.logger.log('Starting voice recognition...');
        this._applyRecognitionHandlers();


        try {
            this.recognition.start();
            this.isListening = true;
            this.restartCount = 0;

            if (micButton) {
                micButton.classList.add('recording');
                micButton.setAttribute('aria-label', 'Stop Voice Search');
            }
        } catch (error) {
            this.logger.error('Error starting recognition:', error);
        }
    }    
 

    /**
     * @method stopService
     * @description Stops the voice search service
     * @param {HTMLButtonElement} micButton - The microphone button element
     */
    stopService(micButton) {
        this.logger.log('Stopping voice recognition manually...');
        this.recognition.stop();
        this.isListening = false; // Prevent auto-restart
    
        if (micButton) {
            micButton.classList.remove('recording');
            micButton.setAttribute('aria-label', 'Start Voice Search');
        }
    }

    /**
     * @private
     * @method _applyRecognitionHandlers
     * @description Matches Commands if useGrammar, or sets up regular speech recognition.
     */ 
    _applyRecognitionHandlers() {
        if (this.useGrammar) {
            this.recognition.onresult = (event) => {
                const last = event.results.length - 1;
                let commands = event.results[last][0].transcript.toLowerCase().trim();
                commands = commands.replace(/[.,\/#!$%\^&\*;:{}=\-_~()]/g, '');
                this.logger.log(`Command detected: ${commands}`);

                for (const [command, details] of Object.entries(commandsGrammar)) {
                    if (details.variations.some(variation => commands.includes(variation))) {
                        this.logger.log(`Executing command: ${command}`);
                        this.matchCommands(command);
                        break;
                    }
                }
            };
        } else {
            this._setupTextInputHandler();
        }
    }
    
    /**
     * @private
     * @method _setupTextInputHandler
     * @description Configures text input handling for populating text based on recognition results.
     */    
    _setupTextInputHandler() {
        if (this.element) {
            if (this.element.tagName === 'INPUT') {
                this.recognition.interimResults = true;
                this.recognition.onresult = (event) => {
                    const lastResultIndex = event.results.length - 1;
                    const transcript = event.results[lastResultIndex][0].transcript.trim();
                    this.logger.log('Final transcript:', transcript);
                    this.element.value = transcript;
                    // TRIGGER THE INPUT EVENT TO SIMULATE TYPING.
                    const inputEvent = new Event('input');
                    this.element.dispatchEvent(inputEvent);
                };
                // AN INTEGRATION FOR THE QUILL.JS NOTEPAD;
            } else {
                this.recognition.onresult = (event) => {
                    const lastResultIndex = event.results.length - 1;
                    const transcript = event.results[lastResultIndex][0].transcript.trim();
                    this.logger.log('Final transcript:', transcript);

                    const existingText = this.element.value || '';
                    this.element.value = existingText
                        .split(' ')
                        .concat(transcript.split(' '))
                        .filter((word, index, array) => array.indexOf(word) === index)
                        .join(' ');
                };
            }
        } else if(quill){
            this.recognition.onresult = (event) => {
                const lastResultIndex = event.results.length - 1;
                const transcript = event.results[lastResultIndex][0].transcript.trim();
                this.logger.log('Final transcript: ', transcript);
                // GET CURRENT QUILL SELECTION (cursor position)
                const range = quill.getSelection();
                if (range) {
                    // INSERT TEXT IN THE CURRENT QUILL CURSOR POSITION;
                    quill.insertText(range.index, transcript + ' ');

                    // MOVE CUSROSR TO THE CURRENT END OF TEXT;
                    quill.setSelection(range.index + transcript.length + 1);
                } else {
                    // IF NO SELECTION APPENED TEXT AT THE END
                    quill.insertText(quill.getLength() - 1, transcript + ' ');
                }
            }
        }
    }

    /**
     * @private
     * @method _setupRecognitionListeners
     * @description Sets up event listeners for speech recognition events like start, end, and errors.
     * @param {HTMLButtonElement} [micButton=null] An Optional element representing a microphone to be used as a toogle.
     */    
    _setupRecognitionListeners(micButton) {
        this.recognition.addEventListener('end', () => {
            this.logger.log('Speech recognition ended.');
    
            // Prevent auto-restart if manually stopped
            if (!this.isListening) {
                this.logger.log('Recognition stopped manually. Auto-restart skipped.');
                return;
            }
    
            if (this.config.autoRestart && this.restartCount < this.config.maxRestarts) {
                this.logger.log(`Auto-restarting... (${++this.restartCount}/${this.config.maxRestarts})`);
                setTimeout(() => this.recognition.start(), 500); // Restart after short delay
            } else {
                this.isListening = false;
                this.logger.log('Max restart limit reached. Stopping auto-restart.');
                if(micButton){
                    micButton.classList.remove('recording')
                }
            }
        });
    
        this.recognition.addEventListener('error', (event) => {
            this.logger.error('Speech recognition error:', event.error);
            this.isListening = false;
            if(micButton){
                micButton.classList.remove('recording')
            }
        });
    }


    /**
     * @method matchCommands
     * @description Matches recognized commands to pre-defined actions and executes corresponding handlers.
     * @param {string} command - The recognized command to match.
     */

    matchCommands(command) {
        const commandHandlers = {
            'search': () => {
                this.recognition.stop();
                const actions = new Actions(HTMLElements, new Logger(true));
                actions.search();
            },
            'stop': () => {
                this.logger.log('Stopping...');
                this.recognition.stop();
            },
            'exit': () => {
                this.logger.log('Exiting...');
                this.recognition.stop();
            },
            'start': () => this.logger.log('Starting...'),
            'pause': () => this.logger.log('Pausing...'),
            'resume': () => this.logger.log('Resuming...'),
            'play': () => this.logger.log('Playing...')
        };

        const handler = commandHandlers[command];
        if (handler) {
            handler();
        } else {
            this.logger.log('Command not recognized');
        }
    }

    /**
     * @method fallbackToManualInput
     * @description Handles the case where speech recognition is unsupported, providing a manual input alternative.
     */    
    fallbackToManualInput() {
        this.logger.error('Voice recognition not supported. Falling back to manual input.');
        // TODO: Could disable voice features, show a message, etc.
    }
}
